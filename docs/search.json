[
  {
    "objectID": "readme.html",
    "href": "readme.html",
    "title": "",
    "section": "",
    "text": "Use this repository to host a website for your CASA0025 final project by following these stpes:\n\nclone this repository\ninstall quarto\nedit the ‘index.qmd’ file with the contents of your project\nusing terminal, navigate to the project directory and run “quarto render”\npush the changes to your github repository\non github, navigate to Settings&gt;Pages&gt;Build and Deployment. Make sure that under “Source” it says “deploy from branch”. Under “Branch”, select “Main” in the first dropdown and “Docs” under the second drop down. Then press “Save”\n\nYour website should now be available under https://{your_username}.github.io/{your_repo_name}"
  },
  {
    "objectID": "index.html#project-summary",
    "href": "index.html#project-summary",
    "title": "CASA0025 Interactive Application",
    "section": "Project Summary",
    "text": "Project Summary\nThe aim of this project is to develop an application to compare the gap between building carbon emissions and vegetation carbon absorption in China’s five major urban agglomerations. This application can not only provide data support and decision-making references for China to achieve its 2060 “carbon neutrality” goal, but also assist researchers around the world in addressing global warming.\n\nProblem Statement\nThe negative impact of global warming on the world continues to intensify (Ahmad et al. 2022). Since 2005, China has become the world’s largest carbon emitter (Zuo et al. 2022). In response to this situation, China has proposed the goal of achieving “carbon neutrality” by 2060 (J. Yang et al. 2022), which can be achieved through various strategies, including social and natural contributions. Among them, natural contributions mainly involve the carbon sequestration capacity of plant ecosystems (Al Kafy et al. 2023). However, natural contributions alone cannot completely offset the \\(CO_{2}\\) produced, and social support is needed to bridge the gap between carbon emissions and carbon absorption (Wu, Tian, and Guo 2022). In addition, as high-risk areas for ecological and environmental issues (Liu et al. 2018), urban agglomerations are important responsible entities for achieving the above goals. As a result, the developed application aims to provide a visualization tool for quantifying the gap in “carbon neutrality” process, thereby providing a reference for the social contribution required to achieve “carbon neutrality”.\n\n\nEnd User\nThis application is aimed at diverse user groups worldwide, including policy makers (e.g. environmental management officials), environmental researchers, corporate sustainability leaders, environmental non-governmental organizations, as well as investors and financial institutions (e.g. carbon finance product developers). These user groups collectively face an urgent need for accurate assessment of carbon emissions and absorption in urban agglomerations, requiring precise and visualized data to support their policy-making, academic research, corporate strategy, public education, and investment decisions. By providing detailed carbon balance analysis of urban agglomerations in China, this application can become a scientific and intuitive decision-making tool for professionals in different fields.\n\n\nData\nConsidering the high correlation between energy consumption and carbon emissions, nighttime light (NTL) data can be used to estimate the spatial distribution of carbon emissions (Wang et al. 2024). This project obtained the latest generation of nighttime light data NPP-VIIRS through GEE.\nThe carbon sequestration capacity of plant ecosystems has been proven to be an important force in reducing atmospheric carbon dioxide accumulation and mitigating climate change (Legesse, Degefa, and Soromessa 2024), so the net primary productivity (NPP) index of vegetation can serve as a proxy indicator for carbon absorption capacity (Das et al. 2023). The dataset for estimating carbon absorption obtained through GEE is shown in the table below. Considering the availability of NPP-VIIRS data, the comprehensive time span of the above types of data is from January 1, 2015 to December 31, 2023. Furthermore, the geographical boundary data of urban agglomerations is GADM data (version 4.1) (“GADM: Global Administrative Areas” 2022), and the population data is also obtained through the GEE platform.\n\n\n\n\n\n\n\n\nIndicator\nDataset\nTime Span\n\n\n\n\nNet primary productivity index (NDVI)\nMODIS/061/MOD13A2\n2015-2023\n\n\nEvaporation and transpiration capacity\nMODIS/061/MOD16A2GF\n2015-2020\n\n\nEvaporation and transpiration capacity\nMODIS/061/MOD16A2\n2021-2023\n\n\nPrecipitation, temperature, and short radiation data\nNASA/FLDAS/NOAH01/C/GL/M/V001\n2015-2023"
  },
  {
    "objectID": "index.html#methodology",
    "href": "index.html#methodology",
    "title": "CASA0025 Interactive Application",
    "section": "Methodology",
    "text": "Methodology\n\nData preprocessing\nIn general, the raw data has been standardized and preprocessed through spatial cropping, missing value filling and smoothing, mask unification, and outlier processing, providing a high-quality data foundation for subsequent estimation of carbon emissions and carbon sequestration at the city scale and analysis of temporal changes.\nAfter data preprocessing, the main step is to estimate the specific carbon emissions and carbon absorption, and calculate the difference between the two, which is represented by the total amount of carbon dioxide.\n\n\nCarbon emissions\nThe estimation method of carbon emissions is improved based on the existing model (T. Yang et al. 2022) by considering the impact of urban area. Firstly, monthly average NTL data (\\(nW/pixel\\)) of cities within five major urban agglomerations were obtained using the NPP-VIIRS dataset. Then, based on converting the NTL data into \\(nW\\) per m², calculate the total NTL intensity (\\(nW\\)) for each city using the following formula.\n\\[\nNTL_{\\text{m²}} = \\frac{NTL_{\\text{pixel}}}{10^4} \\times \\pi\n\\]\n\\[\n  NTL_{total} = NTL_{m^2} \\times A_{city}  \n\\]\nwhere,\n\\(NTL_{total}\\): the total NTL intensity of the city (nW);\n\\(NTL_{pixel}\\): the monthly average nighttime light data for each pixel (nW/cm²/sr);\n\\(NTL_{m^2}\\): : the monthly average nighttime light data for each m^2 (nW/m²);\n\\(A_{city}\\): the area of the city (m²).\nNext, based on the region where the city is located (eastern/central/western), different linear transformation formulas (as shown in the table below) will be used to calculate the total carbon emissions of the city.\n\n\n\n\n\n\n\n\nRegion\nProvince\nFormula\n\n\nWestern\nSichuan, Chongqing\n\\[   NC = \\log(NTL_{total}) \\times 0.3645 + (V_{it} + 2.2189)   \\]\n\n\nCentral\nAnhui; Hubei, Hunan, Jiangxi\n\\[   NC = \\log(NTL_{total}) \\times 1.0484 + (V_{it} - 6.1871)   \\]\n\n\nEastern\nBeijing, Tianjin, Hebei; Shanghai, Jiangsu, Zhejiang; Guangdong\n\\[   NC = \\log(NTL_{total}) \\times 0.8773 + (V_{it} - 4.2414)   \\]\n\n\n\nwhere,\n\\(NC\\): \\(CO_{2}\\) emission amount (10k tons);\n\\(NTL_{total}\\): the total NTL intensity of the city (nW);\n\\(V_{it}\\): fixed impact value (see the table below).\n\n\n\n\n\n\n\n\nRegion\nProvince\nVit\n\n\n\n\nWestern\nSichuan\n0.4006\n\n\n\nChongqing\n-0.0131\n\n\nCentral\nAnhui; Hubei, Hunan, Jiangxi\n/\n\n\nEastern\nBeijing\n1.2970\n\n\n\nTianjin\n0.7509\n\n\n\nHebei\n-0.2134\n\n\n\nShanghai\n1.0254\n\n\n\nJiangsu\n-0.6130\n\n\n\nZhejiang\n-0.4030\n\n\n\nGuangdong\n-0.3258\n\n\n\n\n\nCarbon sequestration\nAs for carbon sequestration, this project refers to The Carnegie-Ames-Stanford approach (CASA) Biosphere model (Potter et al. 1993). The calculation method is based on the carbon absorption related datasets obtained from the GEE platform to estimate carbon absorption. The calculation formula for NPP is as follows.\n\\[NPP=PAR\\times FPAR\\times\\epsilon\\]\nwhere,\n\n\n\n\n\n\n\n\nParameter\nFormula\nExplanation\n\n\n\n\nPAR (Photosynthetically Active Radiation)\n\\[   PAR = Swnet\\_tavg \\times 0.5 \\times \\left(\\frac{30\\,\\text{days}}{106}\\right)  \\]\nwhere,\n\\(Swnet\\_tavg\\): The average value of shortwave net radiation (MJ\\(/m^2/month\\))\n\\(0.5\\): Proportion of photosynthetically active radiation in shortwave radiation;\nConvert the results to a monthly scale.\n\n\nFPAR (Photosynthetically Active Radiation Absorption Ratio)\n\\[  FPAR = \\frac{SR - SR_{min}}{SR_{max} - SR_{min}}  \\]\n\\[     SR = \\frac{NDVI + 1}{1 - NDVI}     \\]\nwhere,\n\\(SR\\): Reflectance;\n\\(NDVI\\): the Normalized Difference Vegetation Index;\n\\(SR_{max}\\) and \\(SR_{min}\\): The minimum and maximum values of \\(SR\\).\nThe value of \\(FPAR\\) is restricted between 0 and 0.95.\n\n\n\\(\\epsilon\\) (Energy Conversion Efficiency)\n\\[\\epsilon = Te1 \\times Te2 \\times WE \\times 0.95 \\]\n\\[   Te1 = 0.8 + 0.027T - 0.00005T^2   \\]\n\\[ Te2 = \\frac{1.184}{1 + e^{-0.2(T-10)} + e^{0.3(T+10)}} \\]\nwhere,\n\\(T\\): Temperature (typically in °C);\n\\(WE\\): Water Use Efficiency.\n\n\n\nBecause the NPP calculated by the above formula is in units of carbon, it needs to be converted into an amount in units of carbon dioxide using the following formula.\n\\[S_{CO_2}=NPP\\times\\frac{44}{12}\\]\nwhere,\n\\(S_{CO_2}\\): Carbon dioxide sequestration capacity of plants (g \\(CO_{2}\\)/m²);\n\\(NPP\\): Net primary productivity of plants (g \\(C\\)/m²);\n\\(\\frac{44}{12}\\): This is a conversion factor derived from the molecular weight ratio of carbon dioxide (CO₂) to carbon (C).\nFinally, the total carbon sequestration amount needs to be obtained by considering the urban area (see formula below).\n\\[\nTCS=S_{CO_2}\\times A_{city}\n\\]\nwhere,\n\\(TCS\\): total carbon dioxide sequestration amount (10k tons);\n\\(S_{CO_2}\\): Carbon dioxide sequestration capacity of plants (g \\(CO_{2}\\)/m²);\n\\(A_{city}\\): the area of the city (m²).\nAfter calculating the total amount of carbon dioxide emissions and carbon sequestration , the net carbon dioxide emissions can be obtained through the following formula.\n\\[\nNC_{CO_2}=NC-TCS\n\\]\nwhere,\n\\(NC_{CO_2}\\): Net \\(CO_{2}\\) emissions (10k tons);\n\\(NC\\): \\(CO_{2}\\) emissions (10k tons);\n\\(TCS\\): total \\(CO_{2}\\) sequestration amount (10k tons)."
  },
  {
    "objectID": "index.html#interface",
    "href": "index.html#interface",
    "title": "CASA0025 Interactive Application",
    "section": "Interface",
    "text": "Interface\nHere are several key components of the application interface:\n\nCustom spatio-temporal range：On the left side of the main interface of the application, an interactive dashboard is displayed, where users can select different years, months, urban agglomerations, provinces, and cities according to their needs. After clicking the corresponding load button, the interactive map in the middle will display the layer of the selected area. Through this customized dashboard, users can quickly select research areas of interest.\nInteractive map: The middle part of the application interface will provide an interactive map, where users can zoom in and out to view specific areas. Additionally, at the top of the interface, users can view the map in a targeted manner by selecting different layers (as shown in the table below) based on their research interests. In addition, users can click on any city area to view the layers.\n\n\n\n\n\n\n\nLayer\nIndicator\n\n\n\n\n1\nCO₂ NetEmissions\n\n\n2\nCO₂ Emissions\n\n\n3\nCO₂ Sequestration\n\n\n4\nNighttime Light\n\n\n5\nFPAR (Photosynthetically Active Radiation Absorption Ratio)\n\n\n6\nEpsilon (Energy Conversion Effciency)\n\n\n7\nNPP (Net Carbon Sequestration)\n\n\n8\nWE (Water Use Effciency)\n\n\n\nVisual charts: After the user selects urban agglomeration, province, city, and specific indicator on the left panel and clicks the corresponding button to load them, the dashboard on the right side of the application interface will display visual charts. They are line chart comparing monthly changes in CO₂ emissions, sequestration, and net emissions; Line chart of monthly changes in multiple indicators, as well as a pie chart of the proportion of annual net CO₂ emissions of each city in its urban agglomeration. These charts can help users understand data in a visual way."
  },
  {
    "objectID": "index.html#the-application",
    "href": "index.html#the-application",
    "title": "CASA0025 Interactive Application",
    "section": "The Application",
    "text": "The Application"
  },
  {
    "objectID": "index.html#how-it-works",
    "href": "index.html#how-it-works",
    "title": "CASA0025 Interactive Application",
    "section": "How it Works",
    "text": "How it Works\n\n1. Data Import and Preliminary Processing\nThis section loads the city list (UG_list) and Chinese city boundary data (gadm41_CHN_2hp). By matching provinces and city names, the city boundaries of the five major urban agglomerations in China are extracted, and attributes such as region and \\(V_{it}\\) value are attached. In addition, the researchers loaded VIIRS nighttime light data as the basis for subsequent CO₂ emissions estimates. However, only preliminary data import is carried out at this stage, and more remote sensing data such as meteorology and vegetation data will be imported in subsequent analysis steps to further calculate carbon sequestration and its key indicators.\n// ====================== Loading and processing data ======================\nvar selectedCitiesTable = ee.FeatureCollection('projects/ee-siyili/assets/UG_list');\nvar allChinaCities = ee.FeatureCollection(\"projects/ee-siyili/assets/gadm41_CHN_2_shp\")\n  .filter(ee.Filter.eq(\"COUNTRY\", \"China\"));\n\n// Match the urban list with the national boundaries\nvar matchedCities = selectedCitiesTable.map(function(row) {\n  var city = row.getString(\"city\");\n  var province = row.getString(\"province\"); \n\n  var matches = allChinaCities.filter(ee.Filter.and(\n    ee.Filter.eq(\"NAME_1\", province),\n    ee.Filter.eq(\"NAME_2\", city)\n  ));\n\n  var mergedGeom = ee.FeatureCollection(matches).union().geometry();\n  var count = matches.size();\n\n// Extract other attribute information\nvar region = row.getString(\"region\");\nvar Vit = row.getNumber(\"Vit\");\nvar urbanAgg = row.getString(\"UrbanAgg\");\n\nreturn ee.Feature(mergedGeom).set({\n  'NAME_2': city,\n  'NAME_1': province,\n  'region': region,\n  'Vit': Vit,\n  'UrbanAgg': urbanAgg,\n  'match_count': count\n});\n}).filter(ee.Filter.gt('match_count', 0));\n\n// Load base image dataset\nvar dataset = ee.ImageCollection('NOAA/VIIRS/DNB/MONTHLY_V1/VCMSLCFG')  \n                .filterDate('2014-01-01', '2023-12-31');  // VIIRS monthly nighttime light Dataset\n\n\n2. Interface and Interactive Controls Design\nThis section aims to built an interactive interface, including the main map (MyMap), status prompt bar, chart panel, and various selectors, supporting flexible filtering of year, month, urban agglomeration, province, city, and indicators. Simultaneously, it also provides a clear button and 3 load data buttons to dynamically update maps and charts. The interface facilitates users to quickly locate or switch cities, provinces, and urban agglomerations.\n// ====================== Map and interface initialisation ======================\nvar MyMap = ui.Map();\n\nvar statusLabel = ui.Label('Waiting for the operation...'); // Real-time display of operation progress\n\nvar indicatorChartWidget = null;\n\nfunction updateStatus(msg) {\n  statusLabel.setValue(msg);\n}\n\nMyMap.addLayer(matchedCities.style({color: 'gray', fillColor: '00000000'}), {}, 'urban boundary');\nMyMap.setCenter(104, 30, 5);\n\n// =============== Legend panel ================\nvar allLegendPanel = ui.Panel({\n  layout: ui.Panel.Layout.flow('horizontal'),\n  style: {\n    position: 'bottom-left',\n    padding: '8px',\n    backgroundColor: 'rgba(255,255,255,0.8)',\n    width: '500px',\n    maxHeight: '115px',\n    whiteSpace: 'nowrap', \n  }\n});\nMyMap.add(allLegendPanel);\n\n// Generate legends for each layer\nfunction createLegendBox(title, palette, min, max) {\n  var titleLabel = ui.Label({\n    value: title,\n    style: {fontWeight: 'bold', fontSize: '12px', margin: '2px 4px'}\n  });\n\n  var colorBar = ui.Thumbnail({\n    image: ee.Image.pixelLonLat().select(0)\n      .multiply((max - min) / 100.0).add(min),\n    params: {\n      bbox: [0, 0, 100, 1],\n      dimensions: '100x10',\n      format: 'png',\n      min: min,\n      max: max,\n      palette: palette\n    },\n    style: {stretch: 'horizontal', margin: '4px 0'}\n  });\n\n  var numTicks = 2;\n  var step = (max - min) / (numTicks - 1);\n\n  var tickLabels = [];\n  for (var i = 0; i &lt; numTicks; i++) {\n    var value = (min + i * step).toFixed(0);\n    tickLabels.push(ui.Label(value, {\n      margin: '0 2px',\n      textAlign: 'center',\n      stretch: 'horizontal'\n    }));\n  }\n\n  var labelRow = ui.Panel({\n    widgets: tickLabels,\n    layout: ui.Panel.Layout.flow('horizontal'),\n    style: {stretch: 'horizontal'}\n  });\n\n  var box = ui.Panel({\n    widgets: [titleLabel, colorBar, labelRow],\n    style: {\n      margin: '0 10px',\n      width: '120px'\n    }\n  });\n\n  return box;\n}\n\n// =============== UI control design ================\nvar currentCityName = null;\n\n// Creating a year selector\nvar yearSelect = ui.Select({\n  items: ['2014', '2015', '2016', '2017','2018', '2019', '2020','2021', '2022', '2023'],\n  value: '2023',\n  placeholder: 'Select Year'\n});\n\n// Creating a month selector\nvar monthSlider = ui.Slider({\n  min: 0, // 0 for the whole year\n  max: 12,\n  step: 1,\n  value: 0,\n  style: {stretch: 'horizontal'},\n  onChange: function(month) {\n  if (currentCityName !== null) {\n    chartPanel.clear();\n    var cityFeature = matchedCities.filter(ee.Filter.eq('NAME_2', currentCityName)).first();\n\n    cityFeature.evaluate(function(f) {\n      if (f) {\n        var cityGeom = ee.Feature(f).geometry();\n        var selectedYear = yearSelect.getValue();\n\n        updateMap(selectedYear, cityGeom, month);\n        plotSinglecityCarbonChart(currentCityName, cityGeom, parseInt(selectedYear), month)\n        .then(function() {\n          plotCityIndicatorChart(currentCityName, cityGeom, parseInt(selectedYear), indicatorSelect.getValue());\n        });\n        updateStatus('Select Month：' + month);\n      } else {\n        updateStatus('No city information found');\n      }\n    });\n  }\n}\n});\n\nvar monthLabel = ui.Label('Please select month (0 = all year)');\n\nvar monthTipLabel = ui.Label({\n  value: 'Slide to update month selection',\n  style: {color: 'gray', fontSize: '11px', margin: '4px 0 8px 8px'}\n});\n\n// Creating a clear button\nvar clearButton = ui.Button({\n  label: 'Clear Selection',\n  onClick: function() {\n    currentCityName = null;\n    \n    var layers = MyMap.layers();\n  while (layers.length() &gt; 0) {\n    layers.remove(layers.get(0));\n  }\n  \n    MyMap.addLayer(matchedCities.style({color: 'gray', fillColor: '00000000'}), {}, 'urban boundary');\n\n    allLegendPanel.clear();\n    chartPanel.clear();\n    urbanAggSelect.setValue(null);\n    provinceSelect.items().reset([]);\n    provinceSelect.setValue(null);\n    citySelect.items().reset([]);\n    citySelect.setValue(null);\n    updateStatus('City selection has been cleared. Please select again.');\n  }\n});\n\n// Creating a city selector\nvar urbanAggSelect = ui.Select({placeholder: 'Select Urban Agglomeration'});\nvar provinceSelect = ui.Select({placeholder: 'Select Province'});\nvar citySelect = ui.Select({placeholder: 'Select City'});\n\nvar urbanAggList = [\n  'Beijing-Tianjin-Hebei',\n  'Yangtze River Delta',\n  'Pearl River Delta',\n  'Middle Yangtze River',\n  'Chengdu-Chongqing'\n];\nurbanAggSelect.items().reset(urbanAggList);\n\n// Urban Agglomeration\nurbanAggSelect.onChange(function(urbanAgg) {\n  var provinces = matchedCities\n    .filter(ee.Filter.eq('UrbanAgg', urbanAgg))\n    .aggregate_array('NAME_1')\n    .distinct()\n    .sort();\n\n  provinces.evaluate(function(provinceList) {\n    provinceSelect.items().reset(provinceList);\n    provinceSelect.setValue(null);\n    citySelect.items().reset([]);\n    citySelect.setValue(null);\n  });\n\n  if (urbanAgg) {\n    var urbanAggCities = matchedCities.filter(ee.Filter.eq('UrbanAgg', urbanAgg));\n    var urbanAggGeometry = urbanAggCities.geometry();\n\n    var layers = MyMap.layers();\n    while (layers.length() &gt; 0) {\n      layers.remove(layers.get(0));\n    }\n\n    MyMap.addLayer(matchedCities.style({color: 'gray', fillColor: '00000000'}), {}, 'urban boundary');\n    MyMap.addLayer(urbanAggCities.style({\n      color: 'blue',\n      fillColor: '0000FF33',\n      width: 2\n    }), {}, 'Selected Urban Agglomeration');\n\n    MyMap.centerObject(urbanAggGeometry, 6);\n    updateStatus('Selected Urban Agglomeration：' + urbanAgg);\n  }\n});\n\n// Province\nprovinceSelect.onChange(function(province) {\n  var urbanAgg = urbanAggSelect.getValue();\n\n  var cities = matchedCities\n    .filter(ee.Filter.and(\n      ee.Filter.eq('UrbanAgg', urbanAgg),\n      ee.Filter.eq('NAME_1', province)\n    ))\n    .aggregate_array('NAME_2')\n    .distinct()\n    .sort();\n\n  cities.evaluate(function(cityList) {\n    citySelect.items().reset(cityList);\n    citySelect.setValue(null);\n  });\n\n  if (urbanAgg && province) {\n    var provinceCities = matchedCities.filter(ee.Filter.and(\n      ee.Filter.eq('UrbanAgg', urbanAgg),\n      ee.Filter.eq('NAME_1', province)\n    ));\n    var provinceGeometry = provinceCities.geometry();\n\n    var layers = MyMap.layers();\n    while (layers.length() &gt; 0) {\n      layers.remove(layers.get(0));\n    }\n\n    MyMap.addLayer(matchedCities.style({color: 'gray', fillColor: '00000000'}), {}, 'urban boundary');\n    MyMap.addLayer(provinceCities.style({\n      color: 'green',\n      fillColor: '00FF0033',\n      width: 2\n    }), {}, 'Selected Province');\n\n    MyMap.centerObject(provinceGeometry, 7);\n    updateStatus('Selected Province：' + province);\n  }\n});\n\n// City\ncitySelect.onChange(function(city) {\n  var urbanAgg = urbanAggSelect.getValue();\n  var province = provinceSelect.getValue();\n\n  if (urbanAgg && province && city) {\n    currentCityName = city;\n\n    var cityFeature = matchedCities.filter(ee.Filter.and(\n      ee.Filter.eq('UrbanAgg', urbanAgg),\n      ee.Filter.eq('NAME_1', province),\n      ee.Filter.eq('NAME_2', city)\n    )).first();\n\n    cityFeature.evaluate(function(f) {\n      if (f) {\n        var cityGeom = ee.Feature(f).geometry();\n\n        var layers = MyMap.layers();\n        while (layers.length() &gt; 0) {\n          layers.remove(layers.get(0));\n        }\n\n        MyMap.addLayer(matchedCities.style({\n          color: 'gray',\n          fillColor: '00000000'\n        }), {}, 'urban boundary');\n\n        MyMap.addLayer(ee.FeatureCollection(ee.Feature(f)).style({\n          color: 'red',\n          fillColor: 'FF000033',\n          width: 2\n        }), {}, 'Selected City');\n\n        MyMap.centerObject(cityGeom, 7);\n        updateStatus('Selected Province：' + city + ' (Click \"Load City Data\" to view the layer.)');\n      } else {\n        updateStatus('No city information found');\n      }\n    });\n  }\n});\n\n// Creating an indicator selector\nvar indicatorSelect = ui.Select({\n  items: [\n    {label: 'Net Carbon Sequestration', value: 'NPP'},\n    {label: 'WE (Water Use Effciency)', value: 'WE'},\n    {label: 'FPAR (Photosynthetically Active Radiation Absorption Ratio)', value: 'FPAR'},\n    {label: 'Energy Conversion Effciency', value: 'Epsilon'},\n    {label: 'Carbon Emission (CO₂)', value: 'Emission'},\n    {label: 'Carbon Sequestration (CO₂)', value: 'CO2Absorption'},\n    {label: 'Precipitation', value: 'Rain'},\n    {label: 'T (Temperature)', value: 'Temperature'},\n    {label: 'PAR (Photosynthetically Active Radiation)', value: 'PAR'}\n  ],\n  value: 'NPP',\n  placeholder: 'select an indicator'\n});\n\nindicatorSelect.onChange(function(indicator) {\n  if (currentCityName !== null) {\n    if (indicatorChartWidget !== null) {\n      chartPanel.remove(indicatorChartWidget);\n      indicatorChartWidget = null;\n    }\n\n    var cityFeature = matchedCities.filter(ee.Filter.eq('NAME_2', currentCityName)).first();\n    cityFeature.evaluate(function(f){\n      if (f) {\n        var cityGeom = ee.Feature(f).geometry();\n        var selectedYear = yearSelect.getValue();\n        var selectedMonth = monthSlider.getValue();\n\n        indicatorChartWidget = plotCityIndicatorChart(currentCityName, cityGeom, parseInt(selectedYear), indicator);\n      }\n    });\n  }\n});\n\nvar indicatorTipLabel = ui.Label({\n  value: 'Update will be shown in the last chart.',\n  style: {\n    fontSize: '11px',\n    color: 'gray',\n    margin: '0 0 4px 10px',\n    padding: '0'\n  }\n});\n\n// \"Load Urban Agglomeration Data\" button\nvar loadUrbanAggButton = ui.Button({\n  label: 'Load Urban Agglomeration Data',\n  onClick: function() {\n    var urbanAgg = urbanAggSelect.getValue();\n    var year = yearSelect.getValue();\n    if (urbanAgg) {\n      chartPanel.clear();\n      var urbanAggCities = matchedCities.filter(ee.Filter.eq('UrbanAgg', urbanAgg));\n      var urbanAggGeometry = urbanAggCities.geometry();\n\n      plotUrbanAgglomerationCarbonChart(urbanAgg, urbanAggGeometry, parseInt(year));\n\n      updateStatus('Loading Urban Agglomeration: ' + urbanAgg);\n    } else {\n      updateStatus('Please select an urban agglomeration.');\n    }\n  }\n});\n\n\n//“Load Provicne Data” button\nvar loadProvinceButton = ui.Button({\n  label: 'Load Province Data',\n  onClick: function() {\n    var urbanAgg = urbanAggSelect.getValue();\n    var province = provinceSelect.getValue();\n    var year = yearSelect.getValue();\n    if (urbanAgg && province) {\n      chartPanel.clear();\n      var provinceGeom = matchedCities.filter(ee.Filter.and(\n        ee.Filter.eq('UrbanAgg', urbanAgg),\n        ee.Filter.eq('NAME_1', province)\n      )).geometry();\n\n      plotProvinceCarbonChart(province, provinceGeom, parseInt(year));\n\n      updateStatus('Loading Province: ' + province);\n    } else {\n      updateStatus('Please select urban agglomeration and province first.');\n    }\n  }\n});\n\n// \"Load City Data\" button\nvar loadFromSelectButton = ui.Button({\n  label: 'Load City Data',\n  onClick: function() {\n    var urbanAgg = urbanAggSelect.getValue();\n    var province = provinceSelect.getValue();\n    var city = citySelect.getValue();\n    var year = yearSelect.getValue();\n    var month = monthSlider.getValue();\n\n    if (urbanAgg && province && city) {\n      chartPanel.clear();\n      currentCityName = city;\n      var cityGeom = matchedCities.filter(ee.Filter.and(\n        ee.Filter.eq('UrbanAgg', urbanAgg),\n        ee.Filter.eq('NAME_1', province),\n        ee.Filter.eq('NAME_2', city)\n      )).first().geometry();\n\n      updateMap(year, cityGeom, month);\n      plotSinglecityCarbonChart(city, cityGeom, parseInt(year), month)\n      .then(function() {\n  indicatorChartWidget = plotCityIndicatorChart(city, cityGeom, parseInt(year), indicatorSelect.getValue());\n  updateStatus('Loading City: ' + city);\n      });\n    } else {\n      updateStatus('Please select an urban agglomeration, province, and city.');\n    }\n  }\n});\n\n// Integrate controls into panels\nvar controls = ui.Panel({\n  widgets: [\n    ui.Label('Please select year'), \n    yearSelect,\n    monthLabel,\n    monthSlider,\n    monthTipLabel,\n    clearButton,\n    ui.Label('Please select an urban agglomeration'),\n    urbanAggSelect, \n    loadUrbanAggButton,\n    ui.Label('Please select a province'),\n    provinceSelect,\n    loadProvinceButton,\n    ui.Label('Please select a city'),\n    citySelect,\n    ui.Label('Please select an indicator'),\n    indicatorSelect,\n    indicatorTipLabel,\n    loadFromSelectButton\n  ],\n  layout: ui.Panel.Layout.flow('vertical'),\n  style: {\n    margin: '4px',\n    padding: '4px'\n  }\n});\n\nvar sidebar = ui.Panel({\n  widgets: [\n    statusLabel,\n    controls\n  ],\n  layout: ui.Panel.Layout.flow('vertical'),\n  style: {\n    width: '290px',\n    position: 'bottom-left'\n  }\n});\n\n// Define the right chart panel\nvar chartPanel = ui.Panel({  \n  layout: ui.Panel.Layout.flow('vertical'),  \n  style: {  \n    position: 'top-right',  \n    width: '300px',    \n    height: '900',    \n    padding: '10px',  \n    backgroundColor: 'rgba(255, 255, 255, 0.8)',  \n    border: '1px solid black'  \n  }  \n});  \nui.root.insert(1, chartPanel);  \n\n// Clear the interface again\nui.root.clear();\n\n// Add a sidebar \nui.root.add(sidebar); \n\n// Add Map (MyMap)\nui.root.add(MyMap);\n\n// Add chart area\nui.root.add(chartPanel);\n\n// =============== Map click interaction ================\n// Event Listener\nMyMap.onClick(function(coords) {\n  var point = ee.Geometry.Point(coords.lon, coords.lat);\n  var clickedFeature = matchedCities.filterBounds(point).first();\n\n//Selecting City Event\n  clickedFeature.evaluate(function(f) {\nif (f) {\n  chartPanel.clear();\n      var cityName = f.properties.NAME_2;\n      currentCityName = cityName;\n      var cityGeom = matchedCities.filter(ee.Filter.eq(\"NAME_2\", cityName)).first().geometry();\n      var selectedYear = yearSelect.getValue();\n      var selectedMonth = monthSlider.getValue();\n      \n      updateMap(selectedYear, cityGeom, selectedMonth);\n      plotSinglecityCarbonChart(cityName, cityGeom, parseInt(selectedYear), selectedMonth)\n      .then(function() {\n        indicatorChartWidget = plotCityIndicatorChart(cityName, cityGeom, parseInt(selectedYear), indicatorSelect.getValue());\n        updateStatus('Click on the city: ' + cityName);\n      });\n    } else {\n      updateStatus('No city selected');\n    }\n  });\n});\n\n// Processing the selected year event\nyearSelect.onChange(function(year) {\n  if (currentCityName !== null) {\n    chartPanel.clear();\n    var cityFeature = matchedCities.filter(ee.Filter.eq('NAME_2', currentCityName)).first();\n\n    cityFeature.evaluate(function(f) {\n      if (f) {\n        var cityGeom = ee.Feature(f).geometry();\n        var selectedMonth = monthSlider.getValue();\n\n        updateMap(year, cityGeom, selectedMonth);\n        plotSinglecityCarbon(currentCityName, cityGeom, parseInt(year), selectedMonth);\n        plotCityIndicatorChart(currentCityName, cityGeom, parseInt(year), indicatorSelect.getValue());\n        updateStatus('Year switching: ' + year);\n      } else {\n        updateStatus('City information not found');\n      }\n    });\n  }\n});\n\n\n3. Data Processing and Analysis\nIn this section, the researchers combine the city, year, and month parameters to dynamically extract and process nighttime light, meteorological, and vegetation related data, completing the calculation of core indicators such as CO₂ emissions, CO₂ sequestration, and net CO₂ emissions. The specific calculation method has been explained in detail in the Methodology section above.\n// =============== Main plotting function ================\n// Set visualization parameters\nvar viirsVis = {\n  min: 0.0,\n  max: 50.0,\n  palette: [\n    'black','darkblue','blue','purple',\n    'cyan','green','yellow','white'\n  ]\n};\n\nvar ncVis = {\n  min: 0,\n  max: 10000,\n  palette: ['green','yellow','red']\n};\n\n// Fuction of carbon emissions\nvar computeNCitj = function(feature) {\n  var region = feature.getString('region');\n  var DN     = ee.Number(feature.get('averageDNitj'));\n  var Vit    = ee.Number(feature.get('Vit'));\n\n  return ee.Algorithms.If(\n    DN.lte(0),\n    feature,\n    (function() {\n      var log_DN = DN.log();\n      var log_NCitj = ee.Algorithms.If(\n        region.equals('eastern'),\n        log_DN.multiply(1.0484).add(Vit.subtract(6.1871)),\n        ee.Algorithms.If(\n          region.equals('central'),\n          log_DN.multiply(0.8773).subtract(4.2414),\n          ee.Algorithms.If(\n            region.equals('western'),\n            log_DN.multiply(0.3645).add(Vit.add(2.2189)),\n            null\n          )\n        )\n      );\n      return feature.set('NCitj', ee.Number(log_NCitj).exp());\n    })()\n  );\n};\n\n// Update the display content of the map\nfunction updateMap(year, geometry, month) {\n  var layers = MyMap.layers();\nwhile (layers.length() &gt; 0) {\n  layers.remove(layers.get(0));\n}\n  allLegendPanel.clear();\n  \n  var startDate, endDate;\n  if (month === 0) {\n    startDate = ee.Date.fromYMD(parseInt(year), 1, 1);\n    endDate = ee.Date.fromYMD(parseInt(year), 12, 31);\n  } else {\n    var monthInt = parseInt(month);  \n    startDate = ee.Date.fromYMD(parseInt(year), monthInt, 1);\n    endDate = startDate.advance(1, 'month');\n  }\n  MyMap.addLayer(matchedCities.style({color: 'gray', fillColor: '00000000'}), {}, 'Boundary of the research area');\n\n//  Nighttime Light Image Collection (year)\n  var viirs = ee.ImageCollection('NOAA/VIIRS/DNB/MONTHLY_V1/VCMSLCFG')\n    .filterDate(startDate, endDate)\n    .select('avg_rad')         // Select the average emissivity band\n    .mean()   \n    .clip(geometry);\n\n// Layer (year)\nvar cityFeature = matchedCities.filterBounds(geometry).first();\nvar region = cityFeature.get('region');\nvar Vit = cityFeature.get('Vit');\n\nvar viirsLight = ee.ImageCollection('NOAA/VIIRS/DNB/MONTHLY_V1/VCMSLCFG')\n  .filterDate(startDate, endDate)\n  .select('avg_rad')\n  .mean()\n  .clip(geometry);\n\n// Average Nighttime Light\nvar meanDN = viirsLight.reduceRegion({\n  reducer: ee.Reducer.mean(),\n  geometry: geometry,\n  scale: 500,\n  maxPixels: 1e9\n}).get('avg_rad');\n\n// Handling missing values\nmeanDN = ee.Algorithms.If(meanDN, meanDN, 0);\nvar logDN = ee.Number(meanDN).log();\n\n// Calculate carbon emissions by region\nvar logNCitj = ee.Algorithms.If(\n  ee.String(region).equals('eastern'),\n  logDN.multiply(1.0484).add(ee.Number(Vit).subtract(6.1871)),\n  ee.Algorithms.If(\n    ee.String(region).equals('central'),\n    logDN.multiply(0.8773).subtract(4.2414),\n    ee.Algorithms.If(\n      ee.String(region).equals('western'),\n      logDN.multiply(0.3645).add(ee.Number(Vit).add(2.2189)),\n      0\n    )\n  )\n);\n\n// Estimating total carbon emissions\n  var NCitj = ee.Number(logNCitj).exp();\n  var cityArea = geometry.area();  // m²\n  var emission = NCitj.multiply(cityArea).divide(250000);  // Ten thousand tons CO₂\n\n  var viirsVis = {        // Visualization\n    min: 0.0,\n    max: 50.0,\n    palette: [\n      'black', 'darkblue', 'blue', 'purple',\n      'cyan', 'green', 'yellow', 'white'\n    ]\n  };\n  \n  var safeDN = viirs.where(viirs.lte(0), 0.1);\n  var logDNimg = safeDN.log();\n\n// Regional coefficient layer\n  var regionStr = ee.String(region);\n  var VitSafe = ee.Algorithms.If(Vit, Vit, 0);\n\n  var a_val = ee.Algorithms.If(\n    regionStr.equals('eastern'), 1.0484,\n    ee.Algorithms.If(regionStr.equals('central'), 0.8773, 0.3645)\n  );\n\n  var b_val = ee.Algorithms.If(\n    regionStr.equals('eastern'), ee.Number(VitSafe).subtract(6.1871),\n    ee.Algorithms.If(regionStr.equals('central'), -4.2414, ee.Number(VitSafe).add(2.2189))\n  );\n\n  var a_img = ee.Image.constant(a_val);\n  var b_img = ee.Image.constant(b_val);\n\n  var logNCitj = logDNimg.multiply(a_img).add(b_img);\n  var emissionImage = logNCitj.exp().multiply(1e10);  \n  var pixelArea = ee.Image.pixelArea();   // Convert units to:(g/m²)\n  emissionImage = emissionImage.divide(pixelArea);  \n\n// Define Carbon Emissions Palette\n  var carbonPalette = [\n    '#ffffcc', '#ffeda0', '#fed976', '#feb24c', '#fd8d3c',\n    '#fc4e2a', '#e31a1c', '#bd0026', '#800026', '#4d0019',\n    '#2b000f', '#67001f', '#99003f', '#b2182b', '#d73027'\n  ];\n\n// Regional visualization scope (g/m²)\n  var visParams = ee.Dictionary({\n    'eastern': {min: 100, max: 3000},\n    'central': {min: 100, max: 4000},\n    'western': {min: 500, max: 5000}\n  });\n\n// NPP/FPAR/Epsilon/WE\n  var dataset = ee.ImageCollection('NASA/FLDAS/NOAH01/C/GL/M/V001')\n    .filterDate(startDate, endDate)\n    .mean()\n    .clip(geometry);\n\n  var rain_temp_par = dataset.expression(\n    'rain * 60 * 60 * 24 * 30', {'rain': dataset.select('Rainf_f_tavg')}\n  ).rename('rain')\n   .addBands(dataset.expression('temp - 273.15', {'temp': dataset.select('Tair_f_tavg')}).rename('temp'))\n   .addBands(dataset.expression('rad * 60 * 60 * 24 * 30 / 1e6 * 0.5', {'rad': dataset.select('Swnet_tavg')}).rename('par'));\n\n  var ndvi = ee.ImageCollection('MODIS/061/MOD13A2')\n    .filterDate(startDate, endDate)\n    .select('NDVI')\n    .mean()\n    .clip(geometry);\n\n  var ndvi_pro = ndvi.multiply(0.0001);\n  var SR = ndvi_pro.add(1).divide(ee.Image(1).subtract(ndvi_pro)).rename('SR');\n\n  var SR_min = SR.reduceRegion({reducer: ee.Reducer.min(), geometry: geometry, scale: 1000}).get('SR');\n  var SR_max = SR.reduceRegion({reducer: ee.Reducer.max(), geometry: geometry, scale: 1000}).get('SR');\n\n  var FPAR = SR.subtract(ee.Number(SR_min)).divide(ee.Number(SR_max).subtract(ee.Number(SR_min))).clamp(0, 0.95).rename('FPAR');\n  var FPAR_filled = FPAR.unmask().focal_mean({radius: 1, units: 'pixels'}).blend(FPAR);\n\n  var evapCollection = ee.ImageCollection(\n    year &lt;= 2020 ? 'MODIS/061/MOD16A2GF' : 'MODIS/061/MOD16A2'\n  );\n\n  var evap = evapCollection\n    .filterDate(startDate, endDate)\n    .mean()\n    .clip(geometry)\n    .select(['ET', 'PET']);\n\n  var WE = evap.expression(\n    '0.5 * ((0.5 + E) / Ep)', {\n      'E': evap.select('ET'),\n      'Ep': evap.select('PET')\n    }).rename('WE');\n\n  var WE_filled = WE.unmask().focal_mean({radius: 1, units: 'pixels'}).blend(WE);\n\n  var T_opt = rain_temp_par.select('temp');\n  var Te1 = ee.Image(0.8).add(T_opt.multiply(0.027)).subtract(T_opt.pow(2).multiply(0.00005)).rename('Te1');\n\n  var Te2 = ee.Image(1.184)\n    .divide(ee.Image(1).add(T_opt.subtract(10).subtract(T_opt).multiply(0.2).exp()))\n    .multiply(ee.Image(1).divide(ee.Image(1).add(T_opt.subtract(10).add(T_opt).multiply(0.3).exp())))\n    .rename('Te2');\n\n  var epsilon = Te1.multiply(Te2).multiply(WE_filled).multiply(0.95).rename('epsilon');\n  var epsilon_filled = epsilon.unmask().focal_mean({radius: 1, units: 'pixels'}).blend(epsilon);\n\n  var common_mask = FPAR_filled.mask()\n    .and(epsilon_filled.mask())\n    .and(WE_filled.mask())\n    .and(rain_temp_par.select('par').mask());\n\n  var par_masked = rain_temp_par.select('par').updateMask(common_mask);\n  var NPP = par_masked.multiply(FPAR_filled).multiply(epsilon_filled).rename('NPP');\n  var CO2_absorption = NPP.multiply(3.6667).rename('CO2_absorption'); // Carbon sequestration CO₂\n  // Calculate net carbon dioxide emissions: carbon dioxide emissions - carbon dioxide sequestration\n  var netEmission = emissionImage.subtract(CO2_absorption).rename('netEmission');\n\n  MyMap.centerObject(geometry, 7);\n\n\n4. Map Layers\nThis section analyzes and displays the calculated results in a layered format, including nighttime light intensity, CO₂ emissions, CO₂ sequestration , net CO₂ emissions, NPP, WE, FPAR, and Epsilon. Users can switch between different indicator layers with one click through the interface, intuitively observing the spatial distribution characteristics and differences of CO₂ emissions and sequestration .\nNote: In the color matching design of the Carbon Sequestration CO₂ layer, a segmented color matching strategy combined with gradient color depth was adopted. Specifically, different color segments (orange-blue-green) are used to quickly distinguish the overall level of carbon sequestration; The gradient inside each color segment is further subdivided into intensity changes, allowing users to accurately perceive differences within the same level. In the Net CO₂ emissions layer, cool colors (green series) are used to represent carbon sequestration, warm colors (yellow to red series) are used to represent carbon emissions, and white is used as a bidirectional symmetrical color band structure with zero emissions, intuitively showing whether the city is a carbon source or sink.\n// =========== Add Layer ==============\n// WE Layer\n  MyMap.addLayer(WE_filled.updateMask(common_mask), {min: 0, max: 1, palette: ['white', 'blue']}, 'WE');\n  allLegendPanel.add(createLegendBox('WE', ['white', 'blue'], 0, 1));\n\n// NPP Layer\n  MyMap.addLayer(NPP, {\n  min: 0,\n  max: 10,\n  palette: [\n    // 0 = white\n    '#ffffff',\n\n    // &gt;0–3：Orange → Deep Red, Level 10 Gradient\n    '#fee8c8', '#fdd49e', '#fdbb84', '#fc8d59', '#ef6548',\n    '#d7301f', '#c1271a', '#bd0026', '#99000d', '#67000d',\n\n    // 3–6：Blue → Purple\n    '#deebf7', '#9ecae1', '#3182bd', '#6a51a3', '#54278f',\n\n    // 6–10：Light green → Dark green\n    '#e5f5e0', '#a1d99b', '#31a354', '#006d2c'\n  ]\n}, 'NPP');\n  allLegendPanel.add(createLegendBox('NPP (gC/m²)', [\n    '#ffffff',\n    '#fee8c8', '#fdd49e', '#fdbb84', '#fc8d59', '#ef6548',\n    '#d7301f', '#c1271a', '#bd0026', '#99000d', '#67000d',\n    '#deebf7', '#9ecae1', '#3182bd', '#6a51a3', '#54278f',\n    '#e5f5e0', '#a1d99b', '#31a354', '#006d2c'\n  ], 0, 10));\n  \n// NPP layer projection information\n  updateStatus('Carbon dioxide sequestration layer projection:', CO2_absorption.projection());\n  updateStatus('Carbon dioxide sequestration layer nominal scale (m):', CO2_absorption.projection().nominalScale());\n  updateStatus('Carbon dioxide emission layer projection:', emissionImage.projection());\n  updateStatus('Carbon dioxide emission layer nominal scale (m):', emissionImage.projection().nominalScale());\n\n// Epsilon Layer\n  MyMap.addLayer(epsilon_filled.updateMask(common_mask), {min: 0, max: 0.5, palette: ['purple', 'blue', 'green']}, 'Epsilon');\n  allLegendPanel.add(createLegendBox('Epsilon', ['purple', 'blue', 'green'], 0, 0.5));\n\n// FPAR Layer\n  MyMap.addLayer(FPAR_filled.updateMask(common_mask), {min: 0, max: 0.95, palette: ['yellow', 'orange', 'red']}, 'FPAR');\n  allLegendPanel.add(createLegendBox('FPAR', ['yellow', 'orange', 'red'], 0, 0.95));\n\n// Nighttime Light Layer\n  MyMap.addLayer(viirs, viirsVis, 'Night-time Lights');\n  allLegendPanel.add(createLegendBox('Nighttime light intensity', viirsVis.palette, viirsVis.min, viirsVis.max));\n\n// Carbon sequestration CO₂ Layer\nMyMap.addLayer(CO2_absorption, {\n  min: 0,\n  max: 30,   \n  palette: [\n    // 0 = white\n    '#ffffff',\n\n    // &gt;0–3：Orange → Deep Red, Level 10 Gradient\n    '#fee8c8', '#fdd49e', '#fdbb84', '#fc8d59', '#ef6548',\n    '#d7301f', '#c1271a', '#bd0026', '#99000d', '#67000d',\n\n    // 3–6：Blue → Purple\n    '#deebf7', '#9ecae1', '#3182bd', '#6a51a3', '#54278f',\n\n    // 6–10：Light green → Dark green\n    '#e5f5e0', '#a1d99b', '#31a354', '#006d2c'\n  ]\n}, 'Carbon sequestration (CO₂)');\n  allLegendPanel.add(createLegendBox('Carbon sequestration (CO₂)', [\n    '#ffffff',\n    '#fee8c8', '#fdd49e', '#fdbb84', '#fc8d59', '#ef6548',\n    '#d7301f', '#c1271a', '#bd0026', '#99000d', '#67000d',\n    '#deebf7', '#9ecae1', '#3182bd', '#6a51a3', '#54278f',\n    '#e5f5e0', '#a1d99b', '#31a354', '#006d2c'\n  ], 0, 30));\n\n// CO₂ Emissions Layer\n  var selectedVis = visParams.get(regionStr).getInfo();\n\n  MyMap.addLayer(emissionImage, {\n    min: selectedVis.min,\n    max: selectedVis.max,\n    palette: carbonPalette\n  }, 'Carbon Emissions (CO₂)'); //(g/m²)\n  allLegendPanel.add(createLegendBox('Carbon Emissions (CO₂)', carbonPalette, selectedVis.min, selectedVis.max));\n\n// Net carbon dioxide emission layer\n  var netEmissionPalette = [\n    '#e5f5e0', '#a1d99b', '#31a354', '#006d2c',  // Negative value (sequestration)\n    '#ffffff',                                   // 0 (white)\n    '#ffffcc', '#ffeda0', '#fed976', '#feb24c',  // Positive value (Light emissions)\n    '#fd8d3c', '#fc4e2a', '#e31a1c', '#bd0026', '#800026'  // Positive value (Heavy emissions)\n  ];\n    \n  MyMap.addLayer(netEmission, {\n    min: -50,\n    max: 200,\n    palette: netEmissionPalette\n  }, 'Net CO₂ emissions (g/m²)');\n  allLegendPanel.add(createLegendBox('Net CO₂ emissions (g/m²)', netEmissionPalette, -50, 200));\n}\n\n\n5. Chart Drawing\nThis section presents line charts of monthly CO₂ emissions, CO₂ sequestration, and net CO₂ emissions trends at different spatial scales (cities, provinces, urban agglomerations) over a year. In addition, the researchers also add a pie chart of the proportion of net CO₂ emissions of cities in urban agglomerations.\n// =============== Line Chart Visualization ================\n\n// figure1: average values of each indicator in cities\nfunction plotCityIndicatorChart(cityName, geometry, year, indicator) {\n  indicator = indicator || 'NPP';\nvar months = ee.List.sequence(1, 12);\n\n  var cityArea = geometry.area();\n\n  var cityFeature = matchedCities.filterBounds(geometry).first();\n  var region = cityFeature.get('region');\n  var Vit = cityFeature.get('Vit');\n\n  var monthlyData = months.map(function(m) {\n    var start = ee.Date.fromYMD(year, m, 1);\n    var end = start.advance(1, 'month');\n\n    var fldas = ee.ImageCollection('NASA/FLDAS/NOAH01/C/GL/M/V001')\n      .filterDate(start, end)\n      .first()\n      .clip(geometry);\n\n    var ndvi = ee.ImageCollection('MODIS/061/MOD13A2')\n      .filterDate(start, end)\n      .select('NDVI')\n      .first()\n      .clip(geometry);\n\n    var nightLight = ee.ImageCollection('NOAA/VIIRS/DNB/MONTHLY_V1/VCMSLCFG')\n      .filterDate(start, end)\n      .first()\n      .clip(geometry);\n\n    var evapCollection = ee.ImageCollection(\n      year &lt;= 2020 ? 'MODIS/061/MOD16A2GF' : 'MODIS/061/MOD16A2'\n    );\n    var evap = evapCollection\n      .filterDate(start, end)\n      .first()\n      .clip(geometry);\n\n    return ee.Algorithms.If(fldas && ndvi && nightLight && evap, (function() {\n      var rain_temp_par = fldas.expression(\n        'rain * 60 * 60 * 24 * 30', {'rain': fldas.select('Rainf_f_tavg')}\n      ).rename('rain')\n        .addBands(fldas.expression('temp - 273.15', {'temp': fldas.select('Tair_f_tavg')}).rename('temp'))\n        .addBands(fldas.expression('rad * 60 * 60 * 24 * 30 / 1e6 * 0.5', {'rad': fldas.select('Swnet_tavg')}).rename('par'));\n\n      var ndvi_pro = ndvi.multiply(0.0001);\n      var SR = ndvi_pro.add(1).divide(ee.Image(1).subtract(ndvi_pro)).rename('SR');\n\n      var SR_min = SR.reduceRegion({reducer: ee.Reducer.min(), geometry: geometry, scale: 1000}).get('SR');\n      var SR_max = SR.reduceRegion({reducer: ee.Reducer.max(), geometry: geometry, scale: 1000}).get('SR');\n\n      var FPAR = SR.subtract(ee.Number(SR_min))\n        .divide(ee.Number(SR_max).subtract(ee.Number(SR_min)))\n        .clamp(0, 0.95)\n        .rename('FPAR');\n      var FPAR_filled = FPAR.unmask().focal_mean({radius: 1, units: 'pixels'}).blend(FPAR);\n\n      var WE = evap.expression(\n        '0.5 * ((0.5 + E) / Ep)', {\n          'E': evap.select('ET'),\n          'Ep': evap.select('PET')\n        }).rename('WE');\n      var WE_filled = WE.unmask().focal_mean({radius: 1, units: 'pixels'}).blend(WE);\n\n      var T_opt = rain_temp_par.select('temp');\n      var Te1 = ee.Image(0.8).add(T_opt.multiply(0.027)).subtract(T_opt.pow(2).multiply(0.00005));\n      var Te2 = ee.Image(1.184)\n        .divide(ee.Image(1).add(T_opt.subtract(10).subtract(T_opt).multiply(0.2).exp()))\n        .multiply(ee.Image(1).divide(ee.Image(1).add(T_opt.subtract(10).add(T_opt).multiply(0.3).exp())));\n\n      var epsilon = Te1.multiply(Te2).multiply(WE_filled).multiply(0.95);\n      var epsilon_filled = epsilon.unmask().focal_mean({radius: 1, units: 'pixels'}).blend(epsilon);\n\n      var common_mask = FPAR_filled.mask()\n        .and(epsilon_filled.mask())\n        .and(WE_filled.mask())\n        .and(rain_temp_par.select('par').mask());\n\n      var par_masked = rain_temp_par.select('par').updateMask(common_mask);\n      var NPP = par_masked.multiply(FPAR_filled).multiply(epsilon_filled).rename('NPP');\n\n      var safeDN = nightLight.select('avg_rad').where(nightLight.select('avg_rad').lte(0), 0.1);\n      var logDNimg = safeDN.log();\n\n      var regionStr = ee.String(region);\n      var VitSafe = ee.Algorithms.If(Vit, Vit, 0);\n\n      var a_val = ee.Algorithms.If(\n        regionStr.equals('eastern'), 1.0484,\n        ee.Algorithms.If(regionStr.equals('central'), 0.8773, 0.3645)\n      );\n\n      var b_val = ee.Algorithms.If(\n        regionStr.equals('eastern'), ee.Number(VitSafe).subtract(6.1871),\n        ee.Algorithms.If(regionStr.equals('central'), -4.2414, ee.Number(VitSafe).add(2.2189))\n      );\n\n      var a_img = ee.Image.constant(a_val);\n      var b_img = ee.Image.constant(b_val);\n\n      var logNCitj = logDNimg.multiply(a_img).add(b_img);\n      var emissionImage = logNCitj.exp().multiply(1e10).divide(ee.Image.pixelArea());\n\n      var CO2_absorption = NPP.multiply(3.6667).rename('CO2_absorption');\n\n      var targetImage = ee.Image(0);\n\n      if (indicator === 'NPP') {\n        targetImage = NPP;\n      } else if (indicator === 'WE') {\n        targetImage = WE_filled;\n      } else if (indicator === 'FPAR') {\n        targetImage = FPAR_filled;\n      } else if (indicator === 'Epsilon') {\n        targetImage = epsilon_filled;\n      } else if (indicator === 'Emission') {\n        targetImage = emissionImage;\n      } else if (indicator === 'CO2Absorption') {\n        targetImage = CO2_absorption;\n      } else if (indicator === 'Rain') {\n        targetImage = rain_temp_par.select('rain');\n      } else if (indicator === 'Temperature') {\n        targetImage = rain_temp_par.select('temp');\n      } else if (indicator === 'PAR') {\n        targetImage = rain_temp_par.select('par');\n      }\n\n      var meanValue = targetImage.reduceRegion({\n        reducer: ee.Reducer.mean(),\n        geometry: geometry,\n        scale: 1000,\n        maxPixels: 1e9\n      }).values().get(0);\n\nmeanValue = ee.Algorithms.If(meanValue, meanValue, 0);\n\n      return ee.Feature(null, {\n        'month': m,\n        'value': meanValue,\n        'city': cityName\n      });\n\n    })(), null);\n  });\n\n  var featureCol = ee.FeatureCollection(monthlyData)\n    .filter(ee.Filter.notNull(['value']))\n    .sort('month');\n  \n  var indicatorUnits = {\n  'NPP': 'gC/m²',\n  'WE': '',\n  'FPAR': '',\n  'Epsilon': '', \n  'Emission': 'gCO₂/m²',\n  'CO2Absorption': 'gCO₂/m²',\n  'Rain': 'mm/month',\n  'Temperature': '°C',\n  'PAR': 'MJ/m²/month'\n    \n  };\n\n  \n  var unit = indicatorUnits[indicator] || '';\n\n  var chart = ui.Chart.feature.byFeature(featureCol, 'month', 'value')\n    .setChartType('LineChart')\n    .setOptions({\n      title:   'Monthly Average Values of '+ indicator + '\\n' + cityName + '（' + year + '）',\n      hAxis: {title: 'month'},\n      vAxis: {title: 'Average Values of'+ indicator + unit},\n      lineWidth: 2,\n      pointSize: 4,\n      height: 152,\n      legend: {position: 'none'}\n    });\n\n  chartPanel.add(chart);\nreturn chart;\n}\n\n\n// figure2: Total carbon emisssions,sequestration,netemisssions amount in agglomerations (10ktons CO₂)\nfunction plotUrbanAgglomerationCarbonChart(urbanAggName, geometry, year) {\n  var months = ee.List.sequence(1, 12);\n  var cityArea = geometry.area();\n\n  var sampleCity = matchedCities.filter(ee.Filter.eq('UrbanAgg', urbanAggName)).first();\n  var region = sampleCity.get('region');\n  var Vit = sampleCity.get('Vit');\n\n  var monthly = months.map(function(m) {\n    var start = ee.Date.fromYMD(year, m, 1);\n    var end = start.advance(1, 'month');\n\n    var nightLight = dataset.filterDate(start, end).mean().clip(geometry);\n    var fldas = ee.ImageCollection('NASA/FLDAS/NOAH01/C/GL/M/V001')\n      .filterDate(start, end).first();\n    var ndvi = ee.ImageCollection('MODIS/061/MOD13A2')\n      .filterDate(start, end).select('NDVI').first();\n    var evapCollection = ee.ImageCollection(\n      year &lt;= 2020 ? 'MODIS/061/MOD16A2GF' : 'MODIS/061/MOD16A2'\n    );\n    var evap = evapCollection.filterDate(start, end).first();\n\n    return ee.Algorithms.If(nightLight && fldas && ndvi && evap, (function() {\n      var meanDN = nightLight.select('avg_rad').reduceRegion({\n        reducer: ee.Reducer.mean(),\n        geometry: geometry,\n        scale: 500,\n        maxPixels: 1e9\n      }).get('avg_rad');\n      meanDN = ee.Algorithms.If(meanDN, meanDN, 0);\n      var logDN = ee.Number(meanDN).log();\n      var logNCitj = ee.Algorithms.If(\n        ee.String(region).equals('eastern'),\n        logDN.multiply(1.0484).add(ee.Number(Vit).subtract(6.1871)),\n        ee.Algorithms.If(\n          ee.String(region).equals('central'),\n          logDN.multiply(0.8773).subtract(4.2414),\n          ee.Algorithms.If(\n            ee.String(region).equals('western'),\n            logDN.multiply(0.3645).add(ee.Number(Vit).add(2.2189)),\n            0\n          )\n        )\n      );\n      var NCitj = ee.Number(logNCitj).exp();\n      var emission = NCitj.multiply(cityArea).divide(250000);\n\n      var rain_temp_par = fldas.expression(\n        'rain * 60 * 60 * 24 * 30', {'rain': fldas.select('Rainf_f_tavg')}\n      ).rename('rain')\n        .addBands(fldas.expression('temp - 273.15', {'temp': fldas.select('Tair_f_tavg')}).rename('temp'))\n        .addBands(fldas.expression('rad * 60 * 60 * 24 * 30 / 1e6 * 0.5', {'rad': fldas.select('Swnet_tavg')}).rename('par'));\n\n      var ndvi_pro = ndvi.multiply(0.0001);\n      var SR = ndvi_pro.add(1).divide(ee.Image(1).subtract(ndvi_pro)).rename('SR');\n\n      var SR_min = SR.reduceRegion({reducer: ee.Reducer.min(), geometry: geometry, scale: 1000}).get('SR');\n      var SR_max = SR.reduceRegion({reducer: ee.Reducer.max(), geometry: geometry, scale: 1000}).get('SR');\n\n      var FPAR = SR.subtract(ee.Number(SR_min)).divide(ee.Number(SR_max).subtract(ee.Number(SR_min))).clamp(0, 0.95);\n      var FPAR_filled = FPAR.unmask().focal_mean({radius: 1, units: 'pixels'}).blend(FPAR);\n\n      var WE = evap.expression(\n        '0.5 * ((0.5 + E) / Ep)', {\n          'E': evap.select('ET'),\n          'Ep': evap.select('PET')\n        }).rename('WE');\n      var WE_filled = WE.unmask().focal_mean({radius: 1, units: 'pixels'}).blend(WE);\n\n      var T_opt = rain_temp_par.select('temp');\n      var Te1 = ee.Image(0.8).add(T_opt.multiply(0.027)).subtract(T_opt.pow(2).multiply(0.00005));\n      var Te2 = ee.Image(1.184)\n        .divide(ee.Image(1).add(T_opt.subtract(10).subtract(T_opt).multiply(0.2).exp()))\n        .multiply(ee.Image(1).divide(ee.Image(1).add(T_opt.subtract(10).add(T_opt).multiply(0.3).exp())));\n\n      var epsilon = Te1.multiply(Te2).multiply(WE_filled).multiply(0.95);\n      var epsilon_filled = epsilon.unmask().focal_mean({radius: 1, units: 'pixels'}).blend(epsilon);\n\n      var common_mask = FPAR_filled.mask()\n        .and(epsilon_filled.mask())\n        .and(WE_filled.mask())\n        .and(rain_temp_par.select('par').mask());\n\n      var par_masked = rain_temp_par.select('par').updateMask(common_mask);\n      var NPP = par_masked.multiply(FPAR_filled).multiply(epsilon_filled).rename('NPP');\n\n      var meanNPP = NPP.reduceRegion({\n        reducer: ee.Reducer.mean(),\n        geometry: geometry,\n        scale: 1000,\n        maxPixels: 1e9\n      }).get('NPP');\n\n      var totalCarbon_g = ee.Number(meanNPP).multiply(cityArea);\n      var totalCO2_g = totalCarbon_g.multiply(44).divide(12);\n      var totalCO2_kt = totalCO2_g.divide(1e8);\n\n      var netEmission = emission.subtract(totalCO2_kt);\n\n      return ee.Feature(null, {\n        'month': m,\n        'emission': emission,\n        'sequestration': totalCO2_kt,\n        'netEmission': netEmission\n      });\n    })(), null);\n  });\n\n  var fc = ee.FeatureCollection(monthly)\n    .filter(ee.Filter.notNull(['emission']))\n    .sort('month');\n\n  var chart = ui.Chart.feature.byFeature(fc, 'month', ['emission', 'sequestration', 'netEmission'])\n    .setChartType('LineChart')\n    .setOptions({\n      title: 'Monthly Carbon Emission / Sequestration / Net Emission\\n' + urbanAggName + '（' + year + '）',\n      hAxis: {title: 'Month'},\n      vAxis: {title: 'Amount (10ktons CO₂)'},\n      lineWidth: 2,\n      pointSize: 4,\n      height: 300,\n      legend: {position: 'bottom'}\n    });\n\n  chartPanel.add(chart);\n}\n\n// figure3: Total carbon emisssions,sequestration,netemisssions amount in provinces (10ktons CO₂)\nfunction plotProvinceCarbonChart(provinceName, geometry, year) {\n  var months = ee.List.sequence(1, 12);\n  var cityArea = geometry.area();\n\n  var sampleCity = matchedCities.filter(ee.Filter.eq('NAME_1', provinceName)).first();\n  var region = sampleCity.get('region');\n  var Vit = sampleCity.get('Vit');\n\n  var monthly = months.map(function(m) {\n    var start = ee.Date.fromYMD(year, m, 1);\n    var end = start.advance(1, 'month');\n\n    var nightLight = dataset.filterDate(start, end).mean().clip(geometry);\n    var fldas = ee.ImageCollection('NASA/FLDAS/NOAH01/C/GL/M/V001')\n      .filterDate(start, end).first();\n    var ndvi = ee.ImageCollection('MODIS/061/MOD13A2')\n      .filterDate(start, end).select('NDVI').first();\n    var evapCollection = ee.ImageCollection(\n      year &lt;= 2020 ? 'MODIS/061/MOD16A2GF' : 'MODIS/061/MOD16A2'\n    );\n    var evap = evapCollection.filterDate(start, end).first();\n\n    return ee.Algorithms.If(nightLight && fldas && ndvi && evap, (function() {\n      var meanDN = nightLight.select('avg_rad').reduceRegion({\n        reducer: ee.Reducer.mean(),\n        geometry: geometry,\n        scale: 500,\n        maxPixels: 1e9\n      }).get('avg_rad');\n      meanDN = ee.Algorithms.If(meanDN, meanDN, 0);\n      var logDN = ee.Number(meanDN).log();\n      var logNCitj = ee.Algorithms.If(\n        ee.String(region).equals('eastern'),\n        logDN.multiply(1.0484).add(ee.Number(Vit).subtract(6.1871)),\n        ee.Algorithms.If(\n          ee.String(region).equals('central'),\n          logDN.multiply(0.8773).subtract(4.2414),\n          ee.Algorithms.If(\n            ee.String(region).equals('western'),\n            logDN.multiply(0.3645).add(ee.Number(Vit).add(2.2189)),\n            0\n          )\n        )\n      );\n      var NCitj = ee.Number(logNCitj).exp();\n      var emission = NCitj.multiply(cityArea).divide(250000);\n\n      var rain_temp_par = fldas.expression(\n        'rain * 60 * 60 * 24 * 30', {'rain': fldas.select('Rainf_f_tavg')}\n      ).rename('rain')\n        .addBands(fldas.expression('temp - 273.15', {'temp': fldas.select('Tair_f_tavg')}).rename('temp'))\n        .addBands(fldas.expression('rad * 60 * 60 * 24 * 30 / 1e6 * 0.5', {'rad': fldas.select('Swnet_tavg')}).rename('par'));\n\n      var ndvi_pro = ndvi.multiply(0.0001);\n      var SR = ndvi_pro.add(1).divide(ee.Image(1).subtract(ndvi_pro)).rename('SR');\n\n      var SR_min = SR.reduceRegion({reducer: ee.Reducer.min(), geometry: geometry, scale: 1000}).get('SR');\n      var SR_max = SR.reduceRegion({reducer: ee.Reducer.max(), geometry: geometry, scale: 1000}).get('SR');\n\n      var FPAR = SR.subtract(ee.Number(SR_min)).divide(ee.Number(SR_max).subtract(ee.Number(SR_min))).clamp(0, 0.95);\n      var FPAR_filled = FPAR.unmask().focal_mean({radius: 1, units: 'pixels'}).blend(FPAR);\n\n      var WE = evap.expression(\n        '0.5 * ((0.5 + E) / Ep)', {\n          'E': evap.select('ET'),\n          'Ep': evap.select('PET')\n        }).rename('WE');\n      var WE_filled = WE.unmask().focal_mean({radius: 1, units: 'pixels'}).blend(WE);\n\n      var T_opt = rain_temp_par.select('temp');\n      var Te1 = ee.Image(0.8).add(T_opt.multiply(0.027)).subtract(T_opt.pow(2).multiply(0.00005));\n      var Te2 = ee.Image(1.184)\n        .divide(ee.Image(1).add(T_opt.subtract(10).subtract(T_opt).multiply(0.2).exp()))\n        .multiply(ee.Image(1).divide(ee.Image(1).add(T_opt.subtract(10).add(T_opt).multiply(0.3).exp())));\n\n      var epsilon = Te1.multiply(Te2).multiply(WE_filled).multiply(0.95);\n      var epsilon_filled = epsilon.unmask().focal_mean({radius: 1, units: 'pixels'}).blend(epsilon);\n\n      var common_mask = FPAR_filled.mask()\n        .and(epsilon_filled.mask())\n        .and(WE_filled.mask())\n        .and(rain_temp_par.select('par').mask());\n\n      var par_masked = rain_temp_par.select('par').updateMask(common_mask);\n      var NPP = par_masked.multiply(FPAR_filled).multiply(epsilon_filled).rename('NPP');\n\n      var meanNPP = NPP.reduceRegion({\n        reducer: ee.Reducer.mean(),\n        geometry: geometry,\n        scale: 1000,\n        maxPixels: 1e9\n      }).get('NPP');\n\n      var totalCarbon_g = ee.Number(meanNPP).multiply(cityArea);\n      var totalCO2_g = totalCarbon_g.multiply(44).divide(12);\n      var totalCO2_kt = totalCO2_g.divide(1e8);\n\n      var netEmission = emission.subtract(totalCO2_kt);\n\n      return ee.Feature(null, {\n        'month': m,\n        'emission': emission,\n        'sequestration': totalCO2_kt,\n        'netEmission': netEmission\n      });\n    })(), null);\n  });\n\n  var fc = ee.FeatureCollection(monthly)\n    .filter(ee.Filter.notNull(['emission']))\n    .sort('month');\n\n  var chart = ui.Chart.feature.byFeature(fc, 'month', ['emission', 'sequestration', 'netEmission'])\n    .setChartType('LineChart')\n    .setOptions({\n      title: 'Monthly Carbon Emission / Sequestration / Net Emission\\n' + provinceName + '（' + year + '）',\n      hAxis: {title: 'Month'},\n      vAxis: {title: 'Amount (10ktons CO₂)'},\n      lineWidth: 2,\n      pointSize: 4,\n      height: 300,\n      legend: {position: 'bottom'}\n    });\n\n  chartPanel.add(chart);\n}\n\n// figure4: Total carbon emisssions,sequestration,netemisssions amount in cities (10ktons CO₂)\nfunction plotSinglecityCarbonChart(cityName, geometry, year) {\n  return new Promise(function(resolve, reject) {\n    var months = ee.List.sequence(1, 12);\n    var cityArea = geometry.area();\n    var cityFeature = matchedCities.filterBounds(geometry).first();\n    var region = cityFeature.get('region');\n    var Vit = cityFeature.get('Vit');\n\n    var monthly = months.map(function(m) {\n      var start = ee.Date.fromYMD(year, m, 1);\n      var end = start.advance(1, 'month');\n\n      var nightLight = dataset.filterDate(start, end).mean().clip(geometry);\n      var fldas = ee.ImageCollection('NASA/FLDAS/NOAH01/C/GL/M/V001').filterDate(start, end).first();\n      var ndvi = ee.ImageCollection('MODIS/061/MOD13A2').filterDate(start, end).select('NDVI').first();\n      var evapCollection = ee.ImageCollection(year &lt;= 2020 ? 'MODIS/061/MOD16A2GF' : 'MODIS/061/MOD16A2');\n      var evap = evapCollection.filterDate(start, end).first();\n\n      return ee.Algorithms.If(nightLight && fldas && ndvi && evap, (function() {\n        var meanDN = nightLight.select('avg_rad').reduceRegion({\n          reducer: ee.Reducer.mean(),\n          geometry: geometry,\n          scale: 500,\n          maxPixels: 1e9\n        }).get('avg_rad');\n        meanDN = ee.Algorithms.If(meanDN, meanDN, 0);\n        var logDN = ee.Number(meanDN).log();\n\n        var logNCitj = ee.Algorithms.If(\n          ee.String(region).equals('eastern'),\n          logDN.multiply(1.0484).add(ee.Number(Vit).subtract(6.1871)),\n          ee.Algorithms.If(\n            ee.String(region).equals('central'),\n            logDN.multiply(0.8773).subtract(4.2414),\n            logDN.multiply(0.3645).add(ee.Number(Vit).add(2.2189))\n          )\n        );\n\n        var NCitj = ee.Number(logNCitj).exp();\n        var emission = NCitj.multiply(cityArea).divide(250000);\n\n        var rain_temp_par = fldas.expression(\n          'rain * 60 * 60 * 24 * 30', {'rain': fldas.select('Rainf_f_tavg')}\n        ).rename('rain')\n          .addBands(fldas.expression('temp - 273.15', {'temp': fldas.select('Tair_f_tavg')}).rename('temp'))\n          .addBands(fldas.expression('rad * 60 * 60 * 24 * 30 / 1e6 * 0.5', {'rad': fldas.select('Swnet_tavg')}).rename('par'));\n\n        var ndvi_pro = ndvi.multiply(0.0001);\n        var SR = ndvi_pro.add(1).divide(ee.Image(1).subtract(ndvi_pro)).rename('SR');\n\n        var SR_min = SR.reduceRegion({reducer: ee.Reducer.min(), geometry: geometry, scale: 1000}).get('SR');\n        var SR_max = SR.reduceRegion({reducer: ee.Reducer.max(), geometry: geometry, scale: 1000}).get('SR');\n\n        var FPAR = SR.subtract(ee.Number(SR_min)).divide(ee.Number(SR_max).subtract(ee.Number(SR_min))).clamp(0, 0.95);\n        var FPAR_filled = FPAR.unmask().focal_mean({radius: 1, units: 'pixels'}).blend(FPAR);\n\n        var WE = evap.expression(\n          '0.5 * ((0.5 + E) / Ep)', {\n            'E': evap.select('ET'),\n            'Ep': evap.select('PET')\n          }).rename('WE');\n        var WE_filled = WE.unmask().focal_mean({radius: 1, units: 'pixels'}).blend(WE);\n\n        var T_opt = rain_temp_par.select('temp');\n        var Te1 = ee.Image(0.8).add(T_opt.multiply(0.027)).subtract(T_opt.pow(2).multiply(0.00005));\n        var Te2 = ee.Image(1.184)\n          .divide(ee.Image(1).add(T_opt.subtract(10).subtract(T_opt).multiply(0.2).exp()))\n          .multiply(ee.Image(1).divide(ee.Image(1).add(T_opt.subtract(10).add(T_opt).multiply(0.3).exp())));\n\n        var epsilon = Te1.multiply(Te2).multiply(WE_filled).multiply(0.95);\n        var epsilon_filled = epsilon.unmask().focal_mean({radius: 1, units: 'pixels'}).blend(epsilon);\n\n        var common_mask = FPAR_filled.mask().and(epsilon_filled.mask()).and(WE_filled.mask()).and(rain_temp_par.select('par').mask());\n        var par_masked = rain_temp_par.select('par').updateMask(common_mask);\n\n        var NPP = par_masked.multiply(FPAR_filled).multiply(epsilon_filled).rename('NPP');\n\n        var meanNPP = NPP.reduceRegion({\n          reducer: ee.Reducer.mean(),\n          geometry: geometry,\n          scale: 1000,\n          maxPixels: 1e9\n        }).get('NPP');\n\n        var totalCarbon_g = ee.Number(meanNPP).multiply(cityArea);\n        var totalCO2_g = totalCarbon_g.multiply(44).divide(12);\n        var totalCO2_kt = totalCO2_g.divide(1e8);\n\n        var netEmission = emission.subtract(totalCO2_kt);\n\n        return ee.FeatureCollection([\n          ee.Feature(null, {'month': m, 'value': totalCO2_kt, 'type': 'Sequestration'}),\n          ee.Feature(null, {'month': m, 'value': emission, 'type': 'Emission'}),\n          ee.Feature(null, {'month': m, 'value': netEmission, 'type': 'NetEmission'})\n        ]);\n      })(), null);\n    });\n\n    var fc = ee.FeatureCollection(monthly).flatten();\n\n    var chart = ui.Chart.feature.groups({\n      features: fc,\n      xProperty: 'month',\n      yProperty: 'value',\n      seriesProperty: 'type'\n    })\n    .setChartType('LineChart')\n    .setOptions({\n      title: 'Monthly Carbon Sequestration / Emissions / Net Emissions\\n' + cityName + ' (' + year + ')',\n      hAxis: {title: 'Month'},\n      vAxis: {title: 'Amount (10ktons CO₂)'},\n      lineWidth: 2,\n      pointSize: 4,\n      height: 300,\n      legend: {position: 'bottom'}\n    });\n\n    chartPanel.add(chart);\n\n    var annualNetEmission = fc.filter(ee.Filter.eq('type', 'NetEmission'))\n      .aggregate_sum('value');\n\n    annualNetEmission.evaluate(function(netEmissionValue) {\n      if (netEmissionValue &lt; 0) {\n        chartPanel.add(ui.Label('This city\\'s annual net CO₂ emissions are less than zero, indicating a carbon sink city.'));\n        resolve();\n      } else {\n        var cityFeature = matchedCities.filter(ee.Filter.eq('NAME_2', cityName)).first();\n        var urbanAgg = cityFeature.get('UrbanAgg');\n        var urbanAggCities = matchedCities.filter(ee.Filter.eq('UrbanAgg', urbanAgg));\n        var urbanAggGeom = urbanAggCities.geometry();\n        var sampleRegion = cityFeature.get('region');\n        var sampleVit = cityFeature.get('Vit');\n\n        var urbanAggMonthly = months.map(function(m) {\n          var start = ee.Date.fromYMD(year, m, 1);\n          var end = start.advance(1, 'month');\n\n          var nightLight = dataset.filterDate(start, end).mean().clip(urbanAggGeom);\n          var meanDN = nightLight.select('avg_rad').reduceRegion({\n            reducer: ee.Reducer.mean(),\n            geometry: urbanAggGeom,\n            scale: 500,\n            maxPixels: 1e9\n          }).get('avg_rad');\n\n          meanDN = ee.Algorithms.If(meanDN, meanDN, 0);\n          var logDN = ee.Number(meanDN).log();\n          var logNCitj = ee.Algorithms.If(\n            ee.String(sampleRegion).equals('eastern'),\n            logDN.multiply(1.0484).add(ee.Number(sampleVit).subtract(6.1871)),\n            ee.Algorithms.If(\n              ee.String(sampleRegion).equals('central'),\n              logDN.multiply(0.8773).subtract(4.2414),\n              logDN.multiply(0.3645).add(ee.Number(sampleVit).add(2.2189))\n            )\n          );\n          var NCitj = ee.Number(logNCitj).exp();\n          var aggArea = urbanAggGeom.area();\n          var totalEmission = NCitj.multiply(aggArea).divide(250000);\n          return totalEmission;\n        });\n\n        var annualUrbanAggNetEmission = ee.Number(urbanAggMonthly.reduce(ee.Reducer.sum()));\n        var cityEmission = ee.Number(netEmissionValue);\n        var restEmission = annualUrbanAggNetEmission.subtract(cityEmission);\n\n        var pieData = ee.FeatureCollection([\n          ee.Feature(null, {'category': cityName, 'emission': cityEmission}),\n          ee.Feature(null, {'category': 'Rest of ' + urbanAgg.getInfo(), 'emission': restEmission})\n        ]);\n\n        var pieChart = ui.Chart.feature.byFeature(pieData, 'category', 'emission')\n          .setChartType('PieChart')\n          .setOptions({\n            title: 'Annual Net CO₂ Emissions Comparison (10ktons):\\nCity vs Rest of Urban Agglomeration',\n            sliceVisibilityThreshold: 0,\n            legend: {position: 'right'},\n            pieSliceText: 'percentage',\n            height: 280\n          });\n\n        chartPanel.add(pieChart);\n        resolve();\n      }\n    });\n  });\n}"
  },
  {
    "objectID": "index.html#bibliography",
    "href": "index.html#bibliography",
    "title": "CASA0025 Interactive Application",
    "section": "Bibliography",
    "text": "Bibliography\n\n\n\n\nAhmad, Adnan, Shahid Ahmad, Ghulam Nabi, Qi-Jing Liu, Nazirul Islam, and Xiaofeng Luan. 2022. “Trends in Deforestation as a Response to Management Regimes and Policy Intervention in the Hindu Kush Himalaya of Pakistan.” Frontiers in Environmental Science 10. https://doi.org/10.3389/fenvs.2022.810806.\n\n\nAl Kafy, Abdulla -, Milan Saha, Md. Abdul Fattah, Muhammad Tauhidur Rahman, Bushra Monowar Duti, Zullyadini A. Rahaman, Arpita Bakshi, S. Kalaivani, Sk Nafiz Rahaman, and Golam Shabbir Sattar. 2023. “Integrating Forest Cover Change and Carbon Storage Dynamics: Leveraging Google Earth Engine and InVEST Model to Inform Conservation in Hilly Regions.” Ecological Indicators 152: 110374. https://doi.org/https://doi.org/10.1016/j.ecolind.2023.110374.\n\n\nDas, Manob, Ashis Mandal, Arijit Das, Miguel Inácio, and Paulo Pereira. 2023. “Mapping and Assessment of Carbon Sequestration Potential and Its Drivers in the Eastern Himalayan Region (India).” Case Studies in Chemical and Environmental Engineering 7: 100344. https://doi.org/https://doi.org/10.1016/j.cscee.2023.100344.\n\n\n“GADM: Global Administrative Areas.” 2022. https://gadm.org/index.html.\n\n\nLegesse, F., S. Degefa, and T. Soromessa. 2024. “Estimating Carbon Stock Using Vegetation Indices and Empirical Data in the Upper Awash River Basin.” Discover Environment 2: 137. https://doi.org/10.1007/s44274-024-00165-8.\n\n\nLiu, Xiaoping, Jinpei Ou, Shaojian Wang, Xia Li, Yuchao Yan, Limin Jiao, and Yaolin Liu. 2018. “Estimating Spatiotemporal Variations of City-Level Energy-Related CO2 Emissions: An Improved Disaggregating Model Based on Vegetation Adjusted Nighttime Light Data.” Journal of Cleaner Production 177: 101–14. https://doi.org/https://doi.org/10.1016/j.jclepro.2017.12.197.\n\n\nPotter, C. S., J. T. Randerson, C. B. Field, P. A. Matson, P. M. Vitousek, H. A. Mooney, and S. A. Klooster. 1993. “Terrestrial Ecosystem Production: A Process Model Based on Global Satellite and Surface Data.” Global Biogeochemical Cycles 7 (4): 811–41. https://doi.org/10.1029/93GB02725.\n\n\nWang, Gengzhe, Qing Hu, Linghao He, Jialong Guo, Jin Huang, and Lijin Zhong. 2024. “The Estimation of Building Carbon Emission Using Nighttime Light Images: A Comparative Study at Various Spatial Scales.” Sustainable Cities and Society 101: 105066. https://doi.org/https://doi.org/10.1016/j.scs.2023.105066.\n\n\nWu, Xianhua, Zhiqing Tian, and Ji Guo. 2022. “A Review of the Theoretical Research and Practical Progress of Carbon Neutrality.” Sustainable Operations and Computers 3: 54–66. https://doi.org/https://doi.org/10.1016/j.susoc.2021.10.001.\n\n\nYang, Jie, Wei Li, Jie Chen, and Chao Sun. 2022. “Refined Carbon Emission Measurement Based on NPP-VIIRS Nighttime Light Data: A Case Study of the Pearl River Delta Region, China.” Sensors (Basel) 23 (1): 191. https://doi.org/10.3390/s23010191.\n\n\nYang, Tianjiao, Jing Liu, Haibo Mi, Zhicheng Cao, Yiting Wang, Huichao Han, Jiahui Luan, and Zhaoxuan Wang. 2022. “An Estimating Method for Carbon Emissions of China Based on Nighttime Lights Remote Sensing Satellite Images.” Sustainability 14 (4): 2269. https://doi.org/10.3390/su14042269.\n\n\nZuo, Chen, Wei Gong, Zhiyu Gao, Deyi Kong, Ruyi Wei, and Xin Ma. 2022. “Correlation Analysis of CO2 Concentration Based on DMSP-OLS and NPP-VIIRS Integrated Data.” Remote Sensing 14 (17): 4181. https://doi.org/10.3390/rs14174181."
  }
]